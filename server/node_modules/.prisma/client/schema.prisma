generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

enum Amenity {
  AIR_CONDITIONING
  WASHER_DRYER
  PARKING
  POOL
  GYM
  DISHWASHER
  HIGH_SPEED_INTERNET
  LAUNDRY
}

enum Highlight {
  HIGH_SPEED_INTERNET
  CLOSE_TO_TRANSIT
  GREAT_VIEW
  RECENTLY_RENOVATED
  QUIET_NEIGHBORHOOD
  SMOKE_FREE
  LUXURY
}

enum PropertyType {
  APARTMENT
  HOUSE
  TOWNHOUSE
  STUDIO
  COTTAGE
  TINYHOUSE
}

enum ApplicationStatus {
  PENDING
  APPROVED
  DENIED
}

model Location {
  id         Int    @id @default(autoincrement())
  country    String
  city       String
  state      String
  address    String
  postalCode String
  latitude   Float?
  longitude  Float?

  properties Property[]
}

model Manager {
  id          Int    @id @default(autoincrement())
  clerkUserId String @unique
  name        String
  email       String
  phoneNumber String

  properties Property[] @relation("ManagedProperties")
}

model Tenant {
  id          Int    @id @default(autoincrement())
  clerkUserId String @unique
  name        String
  email       String
  phoneNumber String

  properties   Property[]    @relation("TenantProperties")
  favorites    Property[]    @relation("TenantFavorites")
  leases       Lease[]
  applications Application[]
}

model Property {
  id                Int          @id @default(autoincrement())
  name              String
  description       String
  pricePerMonth     Float
  securityDeposit   Float
  applicationFee    Float
  photoUrls         String[]
  amenities         Amenity[]
  highlights        Highlight[]
  isPetsAllowed     Boolean
  isParkingIncluded Boolean
  beds              Int
  baths             Float
  squareFeet        Int
  propertyType      PropertyType
  postedDate        DateTime
  averageRating     Float?
  numberOfReviews   Int?
  locationId        Int
  managerClerkId    String?

  location     Location      @relation(fields: [locationId], references: [id])
  manager      Manager?      @relation("ManagedProperties", fields: [managerClerkId], references: [clerkUserId])
  leases       Lease[]
  applications Application[]
  favoritedBy  Tenant[]      @relation("TenantFavorites")
  tenants      Tenant[]      @relation("TenantProperties")
}

model Application {
  id              Int               @id @default(autoincrement())
  applicationDate DateTime
  status          ApplicationStatus
  propertyId      Int
  tenantClerkId   String
  name            String
  email           String
  phoneNumber     String
  message         String?
  leaseId         Int?              @unique

  property Property @relation(fields: [propertyId], references: [id])
  tenant   Tenant   @relation(fields: [tenantClerkId], references: [clerkUserId])
  lease    Lease?   @relation(fields: [leaseId], references: [id])
}

model Lease {
  id            Int      @id @default(autoincrement())
  startDate     DateTime
  endDate       DateTime
  rent          Float
  deposit       Float
  propertyId    Int
  tenantClerkId String

  property    Property     @relation(fields: [propertyId], references: [id])
  tenant      Tenant       @relation(fields: [tenantClerkId], references: [clerkUserId])
  payments    Payment[]
  application Application?
}

model Payment {
  id            Int      @id @default(autoincrement())
  amount        Int
  status        String // or an enum
  amountDue     Int
  amountPaid    Int
  paymentStatus String // or enum
  paymentDate   DateTime
  dueDate       DateTime
  method        String
  leaseId       Int
  lease         Lease    @relation(fields: [leaseId], references: [id])
  createdAt     DateTime @default(now())
}
