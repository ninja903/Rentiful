
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  country: 'country',
  city: 'city',
  state: 'state',
  address: 'address',
  postalCode: 'postalCode',
  latitude: 'latitude',
  longitude: 'longitude'
};

exports.Prisma.ManagerScalarFieldEnum = {
  id: 'id',
  clerkUserId: 'clerkUserId',
  name: 'name',
  email: 'email',
  phoneNumber: 'phoneNumber'
};

exports.Prisma.TenantScalarFieldEnum = {
  id: 'id',
  clerkUserId: 'clerkUserId',
  name: 'name',
  email: 'email',
  phoneNumber: 'phoneNumber'
};

exports.Prisma.PropertyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  pricePerMonth: 'pricePerMonth',
  securityDeposit: 'securityDeposit',
  applicationFee: 'applicationFee',
  photoUrls: 'photoUrls',
  amenities: 'amenities',
  highlights: 'highlights',
  isPetsAllowed: 'isPetsAllowed',
  isParkingIncluded: 'isParkingIncluded',
  beds: 'beds',
  baths: 'baths',
  squareFeet: 'squareFeet',
  propertyType: 'propertyType',
  postedDate: 'postedDate',
  averageRating: 'averageRating',
  numberOfReviews: 'numberOfReviews',
  locationId: 'locationId',
  managerClerkId: 'managerClerkId'
};

exports.Prisma.ApplicationScalarFieldEnum = {
  id: 'id',
  applicationDate: 'applicationDate',
  status: 'status',
  propertyId: 'propertyId',
  tenantClerkId: 'tenantClerkId',
  name: 'name',
  email: 'email',
  phoneNumber: 'phoneNumber',
  message: 'message',
  leaseId: 'leaseId'
};

exports.Prisma.LeaseScalarFieldEnum = {
  id: 'id',
  startDate: 'startDate',
  endDate: 'endDate',
  rent: 'rent',
  deposit: 'deposit',
  propertyId: 'propertyId',
  tenantClerkId: 'tenantClerkId'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  amountDue: 'amountDue',
  method: 'method',
  status: 'status',
  amountPaid: 'amountPaid',
  dueDate: 'dueDate',
  paymentDate: 'paymentDate',
  paymentStatus: 'paymentStatus',
  leaseId: 'leaseId',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.PropertyType = exports.$Enums.PropertyType = {
  APARTMENT: 'APARTMENT',
  HOUSE: 'HOUSE',
  TOWNHOUSE: 'TOWNHOUSE',
  STUDIO: 'STUDIO',
  COTTAGE: 'COTTAGE',
  TINYHOUSE: 'TINYHOUSE'
};

exports.Amenity = exports.$Enums.Amenity = {
  AIR_CONDITIONING: 'AIR_CONDITIONING',
  WASHER_DRYER: 'WASHER_DRYER',
  PARKING: 'PARKING',
  POOL: 'POOL',
  GYM: 'GYM',
  DISHWASHER: 'DISHWASHER',
  HIGH_SPEED_INTERNET: 'HIGH_SPEED_INTERNET',
  LAUNDRY: 'LAUNDRY'
};

exports.Highlight = exports.$Enums.Highlight = {
  HIGH_SPEED_INTERNET: 'HIGH_SPEED_INTERNET',
  CLOSE_TO_TRANSIT: 'CLOSE_TO_TRANSIT',
  GREAT_VIEW: 'GREAT_VIEW',
  RECENTLY_RENOVATED: 'RECENTLY_RENOVATED',
  QUIET_NEIGHBORHOOD: 'QUIET_NEIGHBORHOOD',
  SMOKE_FREE: 'SMOKE_FREE',
  LUXURY: 'LUXURY'
};

exports.ApplicationStatus = exports.$Enums.ApplicationStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  DENIED: 'DENIED'
};

exports.Prisma.ModelName = {
  Location: 'Location',
  Manager: 'Manager',
  Tenant: 'Tenant',
  Property: 'Property',
  Application: 'Application',
  Lease: 'Lease',
  Payment: 'Payment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
